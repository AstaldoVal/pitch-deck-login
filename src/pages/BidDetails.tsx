import { useState, useEffect } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { SidebarProvider } from "@/components/ui/sidebar";
import { PropertySidebar } from "@/components/PropertySidebar";
import { AppHeader } from "@/components/AppHeader";
import { ArrowLeft, Calendar, Users, Briefcase, User, Mail } from "lucide-react";
import { format } from "date-fns";

interface BidData {
  id: string;
  generatedBy: string;
  email: string;
  phone: string;
  companyName: string;
  property: any;
  startDate: Date;
  endDate: Date;
  scopeType: string;
  jobCategories: any[];
  contractors: any[];
  createdAt: string;
}

export default function BidDetails() {
  const { bidId } = useParams();
  const navigate = useNavigate();
  const [bid, setBid] = useState<BidData | null>(null);

  useEffect(() => {
    // Load specific bid from localStorage
    const savedBids = JSON.parse(localStorage.getItem('propertyBids') || '[]');
    const foundBid = savedBids.find((b: BidData) => b.id === bidId);
    setBid(foundBid || null);
  }, [bidId]);

  const handleBackToBids = () => {
    navigate('/property/bids-list');
  };

  const formatBidDate = (date: Date | string | undefined): string => {
    if (!date) return "Not set";
    const dateObj = new Date(date);
    if (isNaN(dateObj.getTime())) return "Invalid date";
    return format(dateObj, 'MMM dd, yyyy');
  };

  const getBidStatus = (bid: BidData) => {
    const now = new Date();
    const startDate = bid.startDate ? new Date(bid.startDate) : null;
    const endDate = bid.endDate ? new Date(bid.endDate) : null;
    
    if (!startDate || !endDate || isNaN(startDate.getTime()) || isNaN(endDate.getTime())) {
      return "Unknown";
    }
    
    if (now < startDate) return "Pending";
    if (now >= startDate && now <= endDate) return "Active";
    return "Completed";
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case "Pending": return "bg-yellow-100 text-yellow-800";
      case "Active": return "bg-green-100 text-green-800";
      case "Completed": return "bg-gray-100 text-gray-800";
      case "Unknown": return "bg-red-100 text-red-800";
      default: return "bg-gray-100 text-gray-800";
    }
  };

  if (!bid) {
    return (
      <SidebarProvider>
        <div className="min-h-screen flex w-full bg-background">
          <PropertySidebar />
          <div className="flex-1 flex flex-col">
            <AppHeader />
            <main className="flex-1 p-6">
              <div className="text-center py-12">
                <h1 className="text-2xl font-bold text-foreground mb-4">Bid Not Found</h1>
                <p className="text-muted-foreground mb-6">The requested bid could not be found.</p>
                <Button onClick={handleBackToBids}>
                  <ArrowLeft className="h-4 w-4 mr-2" />
                  Back to Bids List
                </Button>
              </div>
            </main>
          </div>
        </div>
      </SidebarProvider>
    );
  }

  return (
    <SidebarProvider>
      <div className="min-h-screen flex w-full bg-background">
        <PropertySidebar />
        <div className="flex-1 flex flex-col">
          <AppHeader />
          <main className="flex-1 p-8 space-y-8">
            {/* Header Section */}
            <div className="space-y-6">
              <div className="flex items-center gap-4">
                <Button 
                  variant="outline" 
                  onClick={handleBackToBids}
                  className="flex items-center gap-2"
                >
                  <ArrowLeft className="h-4 w-4" />
                  Back to Bids
                </Button>
              </div>
              
              <div className="border-b border-border pb-6">
                <div className="flex items-start justify-between">
                  <div className="space-y-2">
                    <div className="flex items-center gap-3">
                      <h1 className="text-4xl font-bold text-foreground">Bid #{bid.id}</h1>
                      <Badge className={getStatusColor(getBidStatus(bid))}>
                        {getBidStatus(bid)}
                      </Badge>
                    </div>
                    <p className="text-lg text-muted-foreground">
                      Generated by <span className="font-medium">{bid.generatedBy}</span> â€¢ {bid.companyName}
                    </p>
                    <p className="text-sm text-muted-foreground">
                      Created {formatBidDate(bid.createdAt)}
                    </p>
                  </div>
                  
                  {getBidStatus(bid) === "Completed" && (
                    <Button
                      variant="default"
                      onClick={() => {
                        localStorage.setItem('openProjectId', bid.id);
                        navigate(`/property/project/${bid.id}`);
                      }}
                      className="flex items-center gap-2"
                    >
                      ðŸ”— View Project
                    </Button>
                  )}
                </div>
              </div>
            </div>

            {/* Overview Cards */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <Card className="border-2">
                <CardContent className="p-6">
                  <div className="flex items-center gap-3">
                    <div className="p-2 rounded-lg bg-primary/10">
                      <Calendar className="h-5 w-5 text-primary" />
                    </div>
                    <div>
                      <p className="text-sm font-medium text-muted-foreground">Duration</p>
                      <p className="text-lg font-semibold text-foreground">
                        {formatBidDate(bid.startDate)} - {formatBidDate(bid.endDate)}
                      </p>
                    </div>
                  </div>
                </CardContent>
              </Card>
              
              <Card className="border-2">
                <CardContent className="p-6">
                  <div className="flex items-center gap-3">
                    <div className="p-2 rounded-lg bg-secondary/10">
                      <Users className="h-5 w-5 text-secondary-foreground" />
                    </div>
                    <div>
                      <p className="text-sm font-medium text-muted-foreground">Contractors</p>
                      <p className="text-lg font-semibold text-foreground">
                        {bid.contractors.length} Selected
                      </p>
                    </div>
                  </div>
                </CardContent>
              </Card>
              
              <Card className="border-2">
                <CardContent className="p-6">
                  <div className="flex items-center gap-3">
                    <div className="p-2 rounded-lg bg-accent/10">
                      <Briefcase className="h-5 w-5 text-accent-foreground" />
                    </div>
                    <div>
                      <p className="text-sm font-medium text-muted-foreground">Job Types</p>
                      <p className="text-lg font-semibold text-foreground">
                        {bid.jobCategories.length} Categories
                      </p>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>

            {/* Main Content */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
              {/* Left Column */}
              <div className="space-y-6">
                {/* Contractors */}
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2 text-xl">
                      <Users className="h-6 w-6" />
                      Contractors
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    {bid.contractors.length > 0 ? (
                      <div className="space-y-4">
                        {bid.contractors.map((contractor, index) => (
                          <div key={index} className="flex items-center gap-4 p-4 border rounded-lg bg-card/50">
                            <div className="flex-1">
                              <div className="flex items-center gap-2 mb-2">
                                <User className="h-4 w-4 text-muted-foreground" />
                                <span className="font-semibold text-foreground">{contractor.name}</span>
                              </div>
                              <div className="flex items-center gap-2">
                                <Mail className="h-4 w-4 text-muted-foreground" />
                                <span className="text-muted-foreground">{contractor.email}</span>
                              </div>
                            </div>
                            {contractor.company && (
                              <Badge variant="secondary" className="shrink-0">{contractor.company}</Badge>
                            )}
                          </div>
                        ))}
                      </div>
                    ) : (
                      <div className="text-center py-12">
                        <Users className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                        <p className="text-muted-foreground">No contractors selected for this bid</p>
                      </div>
                    )}
                  </CardContent>
                </Card>

                {/* Contact Information */}
                <Card>
                  <CardHeader>
                    <CardTitle className="text-xl">Contact Information</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      <div className="flex items-center gap-3">
                        <Mail className="h-5 w-5 text-muted-foreground" />
                        <div>
                          <p className="text-sm font-medium text-muted-foreground">Email</p>
                          <p className="text-foreground">{bid.email}</p>
                        </div>
                      </div>
                      <div className="flex items-center gap-3">
                        <User className="h-5 w-5 text-muted-foreground" />
                        <div>
                          <p className="text-sm font-medium text-muted-foreground">Phone</p>
                          <p className="text-foreground">{bid.phone}</p>
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </div>

              {/* Right Column */}
              <div className="space-y-6">
                {/* Job Categories */}
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2 text-xl">
                      <Briefcase className="h-6 w-6" />
                      Job Categories
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    {bid.jobCategories.length > 0 ? (
                      <div className="space-y-4">
                        {bid.jobCategories.map((category, index) => (
                          <div key={index} className="p-4 border rounded-lg bg-card/50">
                            <h4 className="font-semibold text-foreground mb-2">{category.name}</h4>
                            {category.description && (
                              <p className="text-muted-foreground mb-3 text-sm">{category.description}</p>
                            )}
                            <div className="flex flex-wrap gap-2">
                              <Badge variant="outline">#{index + 1}</Badge>
                              {category.priority && (
                                <Badge variant="secondary">Priority: {category.priority}</Badge>
                              )}
                            </div>
                          </div>
                        ))}
                      </div>
                    ) : (
                      <div className="text-center py-12">
                        <Briefcase className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                        <p className="text-muted-foreground">No job categories defined for this bid</p>
                      </div>
                    )}
                  </CardContent>
                </Card>

                {/* Project Details */}
                <Card>
                  <CardHeader>
                    <CardTitle className="text-xl">Project Details</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      <div>
                        <p className="text-sm font-medium text-muted-foreground mb-1">Scope Type</p>
                        <Badge variant="outline" className="text-sm">{bid.scopeType}</Badge>
                      </div>
                      <div>
                        <p className="text-sm font-medium text-muted-foreground mb-1">Start Date</p>
                        <p className="text-foreground">{formatBidDate(bid.startDate)}</p>
                      </div>
                      <div>
                        <p className="text-sm font-medium text-muted-foreground mb-1">End Date</p>
                        <p className="text-foreground">{formatBidDate(bid.endDate)}</p>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </div>
            </div>
          </main>
        </div>
      </div>
    </SidebarProvider>
  );
}