import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { SidebarProvider } from "@/components/ui/sidebar";
import { PropertySidebar } from "@/components/PropertySidebar";
import { AppHeader } from "@/components/AppHeader";
import { Plus, Calendar, Users, Building } from "lucide-react";
import { format } from "date-fns";

interface BidData {
  id: string;
  generatedBy: string;
  email: string;
  phone: string;
  companyName: string;
  property: any;
  startDate: Date;
  endDate: Date;
  scopeType: string;
  jobCategories: any[];
  contractors: any[];
  createdAt: string;
  totalBudget?: number;
}

export default function BidsList() {
  const navigate = useNavigate();
  const [bids, setBids] = useState<BidData[]>([]);

  useEffect(() => {
    // Load bids from localStorage
    const savedBids = JSON.parse(localStorage.getItem('propertyBids') || '[]');
    setBids(savedBids);
  }, []);

  const handleBidClick = (bidId: string) => {
    navigate(`/property/bid/${bidId}`);
  };

  const handleCreateNewBid = () => {
    navigate('/property/bids');
  };

  const getBidStatus = (bid: BidData) => {
    const now = new Date();
    const startDate = bid.startDate ? new Date(bid.startDate) : null;
    const endDate = bid.endDate ? new Date(bid.endDate) : null;
    
    // Check if bid is a draft (incomplete or invalid dates)
    if (!startDate || !endDate || isNaN(startDate.getTime()) || isNaN(endDate.getTime())) {
      return "Draft";
    }
    
    if (now < startDate) return "Draft";
    if (now >= startDate && now <= endDate) return "In Progress";
    return "Completed";
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case "Draft": return "bg-yellow-100 text-yellow-800";
      case "In Progress": return "bg-blue-100 text-blue-800";
      case "Completed": return "bg-green-100 text-green-800";
      default: return "bg-gray-100 text-gray-800";
    }
  };

  const formatBidDate = (date: Date | string | undefined): string => {
    if (!date) return "Not set";
    const dateObj = new Date(date);
    if (isNaN(dateObj.getTime())) return "Invalid date";
    return format(dateObj, 'MMM dd, yyyy');
  };

  return (
    <SidebarProvider>
      <div className="min-h-screen flex w-full bg-background">
        <PropertySidebar />
        <div className="flex-1 flex flex-col">
          <AppHeader />
          <main className="flex-1 p-6 space-y-6">
            <div className="flex justify-between items-center">
              <div>
                <h1 className="text-3xl font-bold text-foreground">Renovation Bids</h1>
                <p className="text-muted-foreground mt-1">
                  Manage and track your property bids
                </p>
              </div>
              <Button 
                onClick={handleCreateNewBid}
                className="flex items-center gap-2"
              >
                <Plus className="h-4 w-4" />
                Create New Bid
              </Button>
            </div>

            {bids.length === 0 ? (
              <Card className="p-12 text-center">
                <div className="mx-auto w-16 h-16 bg-muted rounded-full flex items-center justify-center mb-4">
                  <Building className="h-8 w-8 text-muted-foreground" />
                </div>
                <h3 className="text-lg font-semibold mb-2">No bids created yet</h3>
                <p className="text-muted-foreground mb-4">
                  Get started by creating your first renovation bid
                </p>
                <Button onClick={handleCreateNewBid}>
                  <Plus className="h-4 w-4 mr-2" />
                  Create Your First Bid
                </Button>
              </Card>
            ) : (
              <div className="grid gap-6">
                {bids.map((bid) => (
                  <Card 
                    key={bid.id} 
                    className="hover:shadow-md transition-shadow cursor-pointer"
                    onClick={() => handleBidClick(bid.id)}
                  >
                    <CardHeader>
                      <div className="flex justify-between items-start">
                        <div>
                          <CardTitle className="text-xl">Bid #{bid.id}</CardTitle>
                          <p className="text-muted-foreground">
                            Generated by {bid.generatedBy} â€¢ {bid.companyName}
                          </p>
                        </div>
                        <div className="flex items-center gap-2">
                          <Badge className={getStatusColor(getBidStatus(bid))}>
                            {getBidStatus(bid)}
                          </Badge>
                          {getBidStatus(bid) === "Completed" && (
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={(e) => {
                                e.stopPropagation();
                                // Store the job ID to open in PropertyJobs
                                localStorage.setItem('openJobId', bid.id);
                                navigate('/property/jobs');
                              }}
                              className="flex items-center gap-1 text-xs"
                            >
                              ðŸ”— View Job
                            </Button>
                          )}
                        </div>
                      </div>
                    </CardHeader>
                    <CardContent className="space-y-6">
                      <div className="flex flex-col lg:flex-row lg:justify-between lg:items-start space-y-6 lg:space-y-0">
                        <div className="flex flex-col lg:flex-row lg:gap-12 space-y-6 lg:space-y-0">
                          {/* Project Timeline */}
                          <div className="flex-shrink-0 min-w-[200px]">
                            <div className="flex items-center gap-2 mb-4">
                              <Calendar className="h-4 w-4 text-muted-foreground" />
                              <span className="text-sm font-medium">Project Timeline</span>
                            </div>
                            <div className="space-y-3 pl-6 border-l-2 border-muted">
                              <div>
                                <span className="text-sm text-muted-foreground">Start: </span>
                                <span className="text-sm font-medium">{formatBidDate(bid.startDate)}</span>
                              </div>
                              <div>
                                <span className="text-sm text-muted-foreground">End: </span>
                                <span className="text-sm font-medium">{formatBidDate(bid.endDate)}</span>
                              </div>
                            </div>
                          </div>

                          {/* Contractors */}
                          <div className="flex-shrink-0 min-w-[280px]">
                            <div className="flex items-center gap-2 mb-4">
                              <Users className="h-4 w-4 text-muted-foreground" />
                              <span className="text-sm font-medium">Contractors ({bid.contractors.length})</span>
                            </div>
                            <div className="space-y-3 pl-6 border-l-2 border-muted">
                              {bid.contractors.length > 0 ? (
                                bid.contractors.slice(0, 3).map((contractor, index) => (
                                  <div key={index} className="text-sm flex items-center justify-between py-1">
                                    <div>
                                      <span className="font-medium">
                                        {contractor.firstName && contractor.lastName 
                                          ? `${contractor.firstName} ${contractor.lastName}`
                                          : contractor.name || 'Unknown Name'
                                        }
                                      </span>
                                      <span className="text-muted-foreground"> - {contractor.email}</span>
                                    </div>
                                    <Badge 
                                      variant={contractor.hasSubmitted ? "default" : "secondary"}
                                      className="text-xs ml-3 flex-shrink-0"
                                    >
                                      {contractor.hasSubmitted ? "Submitted" : "Pending"}
                                    </Badge>
                                  </div>
                                ))
                              ) : (
                                <span className="text-sm text-muted-foreground">No contractors selected</span>
                              )}
                              {bid.contractors.length > 3 && (
                                <span className="text-xs text-muted-foreground">
                                  +{bid.contractors.length - 3} more
                                </span>
                              )}
                            </div>
                          </div>
                        </div>

                        {/* Total Proposed Budget - Fixed on the right */}
                        <div className="flex-shrink-0 min-w-[180px] lg:ml-8">
                          <div className="flex items-center gap-2 mb-4">
                            <Building className="h-4 w-4 text-muted-foreground" />
                            <span className="text-sm font-medium">Total Budget</span>
                          </div>
                          <div className="pl-6 border-l-2 border-muted">
                            <span className="text-lg font-bold text-foreground">
                              {bid.totalBudget ? `$${bid.totalBudget.toLocaleString()}` : 'Not specified'}
                            </span>
                          </div>
                        </div>
                      </div>
                      
                      {/* Job Types */}
                      {bid.jobCategories.length > 0 && (
                        <div>
                          <div className="flex items-center gap-2 mb-3">
                            <Building className="h-4 w-4 text-muted-foreground" />
                            <span className="text-sm font-medium">Job Types ({bid.jobCategories.length})</span>
                          </div>
                          <div className="flex flex-wrap gap-2">
                            {bid.jobCategories.map((category, index) => (
                              <Badge key={index} variant="outline" className="text-xs">
                                {category.name}
                              </Badge>
                            ))}
                          </div>
                        </div>
                      )}
                    </CardContent>
                  </Card>
                ))}
              </div>
            )}
          </main>
        </div>
      </div>
    </SidebarProvider>
  );
}